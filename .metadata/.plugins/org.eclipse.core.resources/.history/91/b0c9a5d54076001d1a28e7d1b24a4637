package dispatcher;


public class Interlayer {
	private static Queue RealTimeProcess=null;
	private static Queue UserBasedProcess=null;
	
	public static void Decomposition(Queue ProcessList){
		RealTimeProcess = new Queue();
		UserBasedProcess=new Queue();
		for(int i =0;i<ProcessList.getSize();i++) 
		{

			if(ProcessList.getir(i).Priority==0) 
			{
				RealTimeProcess.ekle(ProcessList.getir(i));
				
			}
			else
			{
				UserBasedProcess.ekle(ProcessList.getir(i));			
			}


		}
		GeneralFunctions.bubbleSortWithArrivalTime(RealTimeProcess);
		GeneralFunctions.bubbleSortWithArrivalTime(UserBasedProcess);
		GeneralFunctions.bubbleSortWithPriority(UserBasedProcess);
		/*
		System.out.println("RealTime Processler\n");
		for(int i =0;i<RealTimeProcess.getSize();i++){
			System.out.println(RealTimeProcess.get(i).PID + " PID");
			System.out.println(RealTimeProcess.get(i).ArrivalTime +" AT");
			System.out.println(RealTimeProcess.get(i).Priority +" Priority");
			System.out.println(RealTimeProcess.get(i).BurstTime+ " BT");
		}
		System.out.println("\nUserBased Processler\n");
		for(int i =0;i<UserBasedProcess.getSize();i++){
			System.out.println(UserBasedProcess.get(i).PID + " PID");
			System.out.println(UserBasedProcess.get(i).ArrivalTime +" AT");
			System.out.println(UserBasedProcess.get(i).Priority +" Priority");
			System.out.println(UserBasedProcess.get(i).BurstTime+ " BT");
		}
		*/
		ProcessDispatcher a = new ProcessDispatcher();
		a.RunDispatcher(RealTimeProcess,UserBasedProcess);
	} 	
}
